#define CG_ON_TARGET

struct digital_key_handler_t
{
	typedef void (*digital_key_handler_func)(unsigned char);
	unsigned char key;
	unsigned char active_level;
	digital_key_handler_func handler;
};

struct analog_key_handler_t
{
	typedef void (*analog_key_handler_func)(unsigned int);
	unsigned char key;
	analog_key_handler_func handler;
};

DeclareResource(can_hardware);
[#DeclareCanSendResourcesAndEvents]
[#DeclareCanRecvResourcesAndEvents]
[#DeclareTaskList]
[#DigitalKeyHandlersPrototypeList]
[#AnalogKeyHandlersPrototypeList]
[#MessageHandlersPrototypeList]
[#DllLoadHandlerPrototype]
[#FunctionsPrototypeList]

const TaskType can_send_msg_queue_senders[] =
{
[#SendMsgTaskList]
};
#define N_SENDERS (sizeof(can_send_msg_queue_senders)/sizeof(TaskType))


const TaskType can_send_msg_queue_receivers[] =
{
[#SendMsgReceiver]
};
#define N_RECEIVERS (sizeof(can_send_msg_queue_receivers)/sizeof(TaskType))

[#InstantiateCanSendDataStructures]

const digital_key_handler_t digital_key_handlers[] =
{
[#DigitalKeyHandlersDeclarationList]
};
#define N_DIGITAL_KEY_HANDLERS (sizeof(digital_key_handlers)/sizeof(digital_key_handler_t))

const analog_key_handler_t analog_key_handlers[] =
{
[#AnalogKeyHandlersDeclarationList]
};
#define N_ANALOG_KEY_HANDLERS (sizeof(analog_key_handlers)/sizeof(analog_key_handler_t))

void SendMsg(const J1939_MSG& msg)
{
[#SendMsgCode]
}

void Trace(const char *)
{

}

#define SPI_CS_PIN 10

MCP_CAN CAN(SPI_CS_PIN);

