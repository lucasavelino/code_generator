struct key_handler_t
{
	typedef void (*key_handler_func)(unsigned char);
	unsigned char key;
	key_handler_func handler;
};

DeclareTask(can_send_task);
DeclareTask(pins_reader);
DeclareResource(can_send_msg_queue_resource);
DeclareEvent(can_send_msg_queue_empty);
DeclareEvent(can_send_msg_queue_full);
[#DeclareTaskList]

[#KeyHandlersPrototypeList]

const TaskType can_send_msg_queue_senders[] =
{
	pins_reader,
[#SendMsgTaskList]
};
#define N_SENDERS (sizeof(can_send_msg_queue_senders)/sizeof(TaskType))


const TaskType can_send_msg_queue_receivers[] =
{
	can_send_task
};
#define N_RECEIVERS (sizeof(can_send_msg_queue_receivers)/sizeof(TaskType))

MessageQueue<J1939_MSG,N_SENDERS,N_RECEIVERS> can_send_msg_queue(can_send_msg_queue_resource, can_send_msg_queue_empty, can_send_msg_queue_full, can_send_msg_queue_senders, can_send_msg_queue_receivers);

const key_handler_t key_handlers[] =
{
[#KeyHandlersDeclarationList]
};
#define N_KEY_HANDLERS (sizeof(key_handlers)/sizeof(key_handler_t))

void SendMsg(const J1939_MSG& msg)
{
	can_send_msg_queue.send(msg);
}

void Trace(const char *)
{

}

#define SPI_CS_PIN 10

MCP_CAN CAN(SPI_CS_PIN);

